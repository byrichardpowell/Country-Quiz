{"version":3,"sources":["Setup/Selector.tsx","Css.ts","Setup/index.tsx","Questions/Question.tsx","Questions/index.tsx","Results/Result.tsx","Results/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SelectorCss","css","_templateObject","Selector","_ref","code","name","onSelect","onDeselect","Object","core_browser_esm","type","value","onChange","e","target","checked","Color","Universal","Css_templateObject","listWrapperCss","Setup_templateObject","countryWrapperCss","_templateObject2","questionTypes","QuizSetup","countries","didSetupQuiz","_useState","useState","_useState2","slicedToArray","search","setSearch","_useState3","_useState4","selectedCountries","setSelectedCountries","_useState5","_useState6","selectedQuestions","setSelectedQuestions","isValid","length","onSubmit","preventDefault","concat","placeholder","filter","country","toLowerCase","indexOf","map","Setup_Selector","assign","key","toConsumableArray","question","disabled","Questions","questionCode","options","didSubmit","answer","setAnswer","react_default","a","createElement","givenAnswer","find","option","correctAnswer","correct","getQuestion","questions","didFinish","questionIndex","setQuestionIndex","answers","setAnswers","Question","newQuestionIndex","newAnswers","answerCss","Result_templateObject","Result","getAnswerIntro","languages","emoji","getAnswerText","getAnswerOutro","listCss","Results_templateObject","Results","reset","correctAnswerCount","percentCorrect","getIntro","getScoreOutro","Results_Result","onClick","client","ApolloClient","uri","GET_SHORT_COUNTRIES","gql","App_templateObject","appCss","App_templateObject2","h1Css","_templateObject3","getLongCountriesQuery","quizSetup","fieldValues","phone","continent","currency","fields","reduce","_templateObject4","getOptionName","isString","isArray","getOptions","questionCountry","uniqFalseOptions","questionCountryOption","thisCountryOption","isObject","push","trueOption","shuffle","sampleSize","App","setQuizSetupOject","styles","react_apollo_esm","query","loading","error","data","message","Setup","_ref2","selectedCountry","sample","src_Questions","src_Results","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a33368bb.chunk.js","sourcesContent":["import React from \"react\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\ninterface Props {\n  code: string;\n  name: string;\n  onSelect: Function;\n  onDeselect: Function;\n}\n\nconst SelectorCss = css`\n  display: block;\n  padding: 0 0 5px 0;\n`;\n\nconst Selector: React.FC<Props> = ({ code, name, onSelect, onDeselect }) => {\n  return (\n    <label css={SelectorCss}>\n      <input\n        type=\"checkbox\"\n        value={code}\n        name={code}\n        onChange={e => {\n          if (e.target.checked) {\n            onSelect(code);\n          } else {\n            onDeselect(code);\n          }\n        }}\n      />\n      {name}\n    </label>\n  );\n};\n\nexport default Selector;\n","import { css } from \"@emotion/core\";\n\nexport const Color = {\n  white: \"#fff\",\n  linen: \"#FAF0E8\",\n  light: \"#B8D8D8\",\n  dark: \"#083D77\",\n  asparagus: \"#73A66B\"\n};\n\nexport const Universal = css`\n  html,\n  body,\n  #root {\n    min-height: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n  }\n  body {\n    background: ${Color.linen};\n  }\n  * {\n    box-sizing: border-box;\n  }\n  form {\n    padding: 10px 0 0;\n  }\n  h1 {\n    margin: 0;\n    padding: 20px 0 0;\n  }\n  fieldset {\n    border-radius: 10px;\n    display: block;\n    border: none;\n    margin: 0 0 20px;\n    padding: 10px 0;\n  }\n  legend {\n    font-weight: bold;\n  }\n  label {\n    padding: 0 15px 0 0;\n  }\n  input[type=\"search\"],\n  input[type=\"text\"] {\n    padding: 5px 10px;\n    border: 1px solid ${Color.light};\n    border-radius: 2px;\n  }\n  button {\n    display: inline-block;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    padding: 10px 15px;\n    background: ${Color.asparagus};\n    border-radius: 5px;\n    border: 1px solid transparent;\n    color: ${Color.white};\n    font-weight: bold;\n    font-size: 14px;\n    cursor: pointer;\n  }\n  button[disabled] {\n    opacity: 0.5;\n    cursor: default;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { ShortCountries } from \"../types\";\nimport Selector from \"./Selector\";\nimport { Color } from \"../Css\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\ninterface Props extends ShortCountries {\n  didSetupQuiz: Function;\n}\n\nconst listWrapperCss = css`\n  width: 100%;\n  max-width: 400px;\n  height: 240px;\n  position: relative;\n\n  input[type=\"search\"] {\n    width: 100%;\n    padding: 15px 10px;\n  }\n\n  label {\n    display: block;\n    padding: 10px 5px 5px 5px;\n    cursor: pointer;\n  }\n\n  label:hover {\n    background: ${Color.light};\n  }\n\n  input[type=\"checkbox\"] {\n    margin-right: 5px;\n  }\n`;\n\nconst countryWrapperCss = css`\n  max-height: 190px;\n  overflow: auto;\n  background: ${Color.white};\n  border: 1px solid ${Color.light};\n  border-top: none;\n`;\n\nconst questionTypes = [\n  {\n    code: \"phone\",\n    name: \"international phone codes\"\n  },\n  {\n    code: \"continent\",\n    name: \"continents\"\n  },\n  {\n    code: \"currency\",\n    name: \"currency\"\n  },\n  {\n    code: \"languages\",\n    name: \"languages\"\n  },\n  {\n    code: \"emoji\",\n    name: \"flags\"\n  }\n];\n\nconst QuizSetup: React.FC<Props> = ({ countries, didSetupQuiz }) => {\n  const [search, setSearch] = useState(\"\");\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const isValid = selectedCountries.length > 0 && selectedQuestions.length > 0;\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        didSetupQuiz({\n          selectedQuestions,\n          selectedCountries\n        });\n      }}\n    >\n      <fieldset>\n        <legend>\n          Which countries?{\" \"}\n          <small>({`${selectedCountries.length} selected`})</small>\n        </legend>\n        <div css={listWrapperCss}>\n          <input\n            type=\"search\"\n            placeholder=\"Search for a country\"\n            onChange={e => setSearch(e.target.value)}\n            value={search}\n          />\n          <div css={countryWrapperCss}>\n            {countries\n              .filter(\n                country =>\n                  country.name.toLowerCase().indexOf(search.toLowerCase()) >\n                    -1 ||\n                  country.code.toLowerCase().indexOf(search.toLowerCase()) > -1\n              )\n              .map(country => {\n                return (\n                  <Selector\n                    {...country}\n                    key={country.code}\n                    onSelect={code => {\n                      setSelectedCountries([...selectedCountries, ...[code]]);\n                    }}\n                    onDeselect={code =>\n                      setSelectedCountries(\n                        selectedCountries.filter(code => code !== country.code)\n                      )\n                    }\n                  />\n                );\n              })}\n          </div>\n        </div>\n      </fieldset>\n      <fieldset>\n        <legend>What topics do you want questions on?</legend>\n        {questionTypes.map(question => {\n          return (\n            <Selector\n              {...question}\n              onSelect={code => {\n                setSelectedQuestions([...selectedQuestions, ...[code]]);\n              }}\n              onDeselect={code =>\n                setSelectedQuestions(\n                  selectedQuestions.filter(code => question.code !== code)\n                )\n              }\n            />\n          );\n        })}\n      </fieldset>\n      <button type=\"submit\" disabled={isValid === false}>\n        Start the quiz!\n      </button>\n    </form>\n  );\n};\n\nexport default QuizSetup;\n","import React, { useState } from \"react\";\nimport { FullCountry } from \"../types\";\n\ninterface Props {\n  country: FullCountry;\n  questionCode: string;\n  options: Array<{\n    name: string;\n    correct: boolean;\n  }>;\n  didSubmit: Function;\n}\n\nconst getQuestion = (questionCode, country) => {\n  switch (questionCode) {\n    case \"phone\":\n      return `What phone code does ${country.name} have?`;\n    case \"continent\":\n      return `What continent does ${country.name} belong to?`;\n    case \"currency\":\n      return `What currency does ${country.name} use?`;\n    case \"languages\":\n      return `What is one language ${country.name} speaks?`;\n    case \"emoji\":\n      return `What is the flag of ${country.name}?`;\n  }\n};\n\nconst Questions: React.FC<Props> = ({\n  questionCode,\n  country,\n  options,\n  didSubmit\n}) => {\n  const [answer, setAnswer] = useState(null);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        didSubmit({\n          questionCode,\n          country,\n          givenAnswer: options.find(option => option.name === answer.name),\n          correctAnswer: options.find(option => option.correct === true)\n        });\n        setAnswer(null);\n      }}\n    >\n      <fieldset>\n        <legend>{getQuestion(questionCode, country)}</legend>\n        {options.map(option => {\n          return (\n            <label>\n              <input\n                type=\"radio\"\n                name=\"option\"\n                value={option.name}\n                onChange={e => setAnswer(option)}\n                checked={answer && answer.name === option.name}\n              />\n              {option.name}\n            </label>\n          );\n        })}\n      </fieldset>\n      <button type=\"submit\" disabled={!answer}>\n        Next\n      </button>\n    </form>\n  );\n};\n\nexport default Questions;\n","import React, { useState } from \"react\";\nimport Question from \"./Question\";\nimport { FullCountry } from \"../types\";\n\ninterface Props {\n  questions: Array<{\n    country: FullCountry;\n    questionCode: string;\n    options: Array<{\n      name: string;\n      correct: boolean;\n    }>;\n  }>;\n  didFinish: Function;\n}\n\nconst Questions: React.FC<Props> = ({ questions, didFinish }) => {\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const question = questions[questionIndex];\n  return (\n    <div>\n      <h2>\n        Question {questionIndex + 1} of {questions.length}\n      </h2>\n      <Question\n        {...question}\n        didSubmit={answer => {\n          const newQuestionIndex = questionIndex + 1;\n          const newAnswers = [...answers, ...[answer]];\n\n          if (newQuestionIndex === questions.length) {\n            didFinish(newAnswers);\n          } else {\n            setAnswers(newAnswers);\n            setQuestionIndex(newQuestionIndex);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Questions;\n","import React from \"react\";\nimport { Answer } from \"../types\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nconst answerCss = css`\n  padding: 0 0 10px 0;\n`;\n\nconst getAnswerIntro = (correctAnswer, givenAnswer): string => {\n  return correctAnswer.name === givenAnswer.name ? \"Correct\" : \"Sorry\";\n};\n\nconst getAnswerText = (questionCode, country, correctAnswer): string => {\n  switch (questionCode) {\n    case \"phone\":\n      return `${correctAnswer.name} is the international dialing code for ${\n        country.name\n      }`;\n    case \"continent\":\n      return `${country.name} belongs to the continent of ${\n        correctAnswer.name\n      }`;\n    case \"languages\":\n      return `${country.name} speaks ${country.languages[0].name}`;\n    case \"currency\":\n      return `${correctAnswer.name} is the currency of ${country.name}`;\n    case \"emoji\":\n      return `${country.emoji} is the flag for ${country.name}`;\n  }\n};\n\nconst getAnswerOutro = (correctAnswer, givenAnswer): string => {\n  if (correctAnswer.name !== givenAnswer.name) {\n    return `not ${givenAnswer.name}`;\n  }\n  return \"\";\n};\n\nconst Result: React.FC<Answer> = ({\n  questionCode,\n  country,\n  givenAnswer,\n  correctAnswer\n}) => {\n  return (\n    <li css={answerCss}>\n      <strong>{getAnswerIntro(correctAnswer, givenAnswer)}</strong>{\" \"}\n      {getAnswerText(questionCode, country, correctAnswer)}{\" \"}\n      {getAnswerOutro(correctAnswer, givenAnswer)}\n    </li>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\nimport Result from \"./Result\";\nimport { Answer } from \"../types\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\ninterface Props {\n  answers: Array<Answer>;\n  reset: Function;\n}\n\nconst listCss = css`\n  padding: 10px 0 40px 0;\n  margin: 0;\n  list-style-type: none;\n`;\n\nconst getIntro = (percentCorrect: number): string => {\n  if (percentCorrect === 1) {\n    return \"Amazing! Congratulations! Perfecto!\";\n  } else if (percentCorrect > 0.5) {\n    return \"Good job\";\n  } else if (percentCorrect > 0.3) {\n    return \"Not bad\";\n  } else {\n    return \"Oh no!\";\n  }\n};\n\nconst getScoreOutro = (percentCorrect: number): string => {\n  if (percentCorrect === 1) {\n    return \"Amazing job.  You're a real expert\";\n  } else if (percentCorrect > 0.5) {\n    return \"That's pretty good.\";\n  } else if (percentCorrect > 0.3) {\n    return \"Not bad.  Could be better.\";\n  } else {\n    return \"Better luck next time.\";\n  }\n};\n\nconst Results: React.FC<Props> = ({ answers, reset }) => {\n  const correctAnswerCount = answers.filter(answer => {\n    return answer.givenAnswer.correct === true;\n  }).length;\n  const percentCorrect = correctAnswerCount / answers.length;\n\n  return (\n    <div>\n      <h2>{getIntro(percentCorrect)}</h2>\n      <p>{`${correctAnswerCount} out of ${answers.length}. ${getScoreOutro(\n        percentCorrect\n      )}`}</p>\n      <ol css={listCss}>\n        {answers.map(answer => {\n          return <Result {...answer} />;\n        })}\n      </ol>\n      <button\n        type=\"button\"\n        onClick={e => {\n          e.preventDefault();\n          reset();\n        }}\n      >\n        Start a new quiz\n      </button>\n    </div>\n  );\n};\n\nexport default Results;\n","import React, { useState } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport QuizSetup from \"./Setup\";\nimport { ShortCountries, FullCountries } from \"./types\";\nimport { Color, Universal } from \"./Css\";\nimport Questions from \"./Questions\";\nimport Results from \"./Results\";\nimport {\n  isString,\n  isObject,\n  shuffle,\n  sample,\n  sampleSize,\n  find,\n  isArray\n} from \"lodash\";\n/** @jsx jsx */\nimport { Global, jsx, css } from \"@emotion/core\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\"\n});\n\n// write a GraphQL query that asks for names and codes for all countries\nconst GET_SHORT_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n    }\n  }\n`;\n\nconst appCss = css`\n  font-family: \"Courier\";\n  background: ${Color.white};\n  color: ${Color.dark};\n  padding: 0 20px 20px;\n  height: 100%;\n  border: 10px solid ${Color.linen};\n`;\n\nconst h1Css = css`\n  color: ${Color.dark};\n`;\n\nconst getLongCountriesQuery = (quizSetup): String => {\n  const fieldValues = {\n    phone: `phone\n    `,\n    continent: `continent {\n      name\n    }\n    `,\n    currency: `currency\n    `,\n    languages: `languages {\n      name\n    }\n    `,\n    emoji: `emoji\n    `\n  };\n\n  const fields = quizSetup.selectedQuestions.reduce((fields, question) => {\n    return (fields += fieldValues[question]);\n  }, \"\");\n\n  return gql`\n    {\n      countries {\n        name\n        code\n        ${fields}\n      }\n    }\n  `;\n};\n\nconst getOptionName = (country, questionCode) => {\n  if (isString(country[questionCode])) {\n    return country[questionCode];\n  }\n  if (isArray(country[questionCode]) && country[questionCode].length) {\n    return country[questionCode][0].name;\n  }\n  return country[questionCode].name;\n};\n\nconst getOptions = (questionCode, questionCountry, countries) => {\n  const uniqFalseOptions = countries.reduce((options, country) => {\n    const questionCountryOption = getOptionName(questionCountry, questionCode);\n    const thisCountryOption = getOptionName(country, questionCode);\n\n    if (questionCountryOption !== thisCountryOption) {\n      if (isObject(find(options, [\"name\", thisCountryOption])) === false) {\n        options.push({\n          name: thisCountryOption,\n          correct: false\n        });\n      }\n    }\n    return options;\n  }, []);\n\n  const trueOption = {\n    correct: true,\n    name: getOptionName(questionCountry, questionCode)\n  };\n  return shuffle([...sampleSize(uniqFalseOptions, 3), ...[trueOption]]);\n};\n\nconst App: React.FC = () => {\n  const [quizSetup, setQuizSetupOject] = useState(null);\n  const [answers, setAnswers] = useState(null);\n\n  return (\n    <div css={appCss}>\n      <Global styles={Universal} />\n      <h1 css={h1Css}>A Country Quiz</h1>\n      <p>Test your country knowledge.</p>\n      {!quizSetup ? (\n        <Query<ShortCountries> query={GET_SHORT_COUNTRIES} client={client}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>{error.message}</p>;\n            return (\n              <QuizSetup\n                countries={data.countries}\n                didSetupQuiz={setQuizSetupOject}\n              />\n            );\n          }}\n        </Query>\n      ) : null}\n      {quizSetup && !answers ? (\n        <Query<FullCountries>\n          query={getLongCountriesQuery(quizSetup)}\n          client={client}\n        >\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>{error.message}</p>;\n\n            const questions = quizSetup.selectedCountries.map(\n              selectedCountry => {\n                const country = data.countries.find(\n                  country => country.code === selectedCountry\n                );\n                const questionCode = sample(quizSetup.selectedQuestions);\n\n                return {\n                  country,\n                  questionCode,\n                  options: getOptions(questionCode, country, data.countries)\n                };\n              }\n            );\n\n            return <Questions questions={questions} didFinish={setAnswers} />;\n          }}\n        </Query>\n      ) : null}\n      {answers ? (\n        <Results\n          answers={answers}\n          reset={() => {\n            setQuizSetupOject(null);\n            setAnswers(null);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}